/**/

////////////////////////////////////////////////////////////////////////////
//	グローバル変数
//////////////////////////////////////////////////////////////////////////
$g_separator="\x0B";	//垂直タブ
$g_marker="#layer0";


////////////////////////////////////////////////////////////////////////////
//	メイン処理
////////////////////////////////////////////////////////////////////////////
#g_dll_hm_process=val(getarg(29));
#g_dll_ohtorii_tools=val(getarg(30));
$label=getarg(0);
$arg1=getarg(1);
$arg2=getarg(2);
$arg3=getarg(3);
$arg4=getarg(4);
$arg5=getarg(5);


call $label, $arg1, $arg2, $arg3, $arg4, $arg5 ;
endmacro $$return;



////////////////////////////////////////////////////////////////////////////
//	Request.
////////////////////////////////////////////////////////////////////////////
/*
実装	アクション
○		function! s:kind.action_table.open.func(candidates) abort "{{{
○		function! s:kind.action_table.preview.func(candidate) abort "{{{
		function! s:kind.action_table.mkdir.func(candidate) abort "{{{
		function! s:kind.action_table.rename.func(candidates) abort "{{{
		function! s:kind.action_table.backup.func(candidates) abort "{{{
		function! s:kind.action_table.read.func(candidates) abort "{{{
		function! s:kind.action_table.wunix.func(candidates) abort "{{{
		function! s:kind.action_table.diff.func(candidates) abort "{{{
		function! s:kind.action_table.dirdiff.func(candidates) abort "{{{
		function! s:kind.action_table.grep.func(candidates) abort "{{{
		function! s:kind.action_table.vimgrep.func(candidates) abort "{{{
		function! s:kind.action_table.find.func(candidate) abort "{{{
		function! s:kind.action_table.argadd.func(candidates) abort "{{{

*/

do_action:
	$$action=$$1;
	call $$action;
	return $$return;


////////////////////////////////////////////////////////////////////////////
//	Action.
////////////////////////////////////////////////////////////////////////////

//
//open
//
open:
	##new_hidemaru_handle=-1;
	{
		##current_hidemaru_handle=hidemaruhandle(0);

		##count=dllfuncw(#g_dll_ohtorii_tools,"GetSelectionCount");
		$$filenames[0]="";
		##i=0;
		while(##i < ##count){
			$$filenames[##i]=dllfuncstrw(#g_dll_ohtorii_tools,"GetSelectionActionFileName",##i);
			##i = ##i + 1;
		}

        $$macro_root_dir=dllfuncstrw(#g_dll_ohtorii_tools,"StaticStatusGetRootMacroDirectory");
		$$macro_path=$$macro_root_dir+"\\internal\\show_message.mac";

		##i=0;
		while(##i < ##count){
			$$text = $$filenames[##i];
			if($$text!=""){
				call check_file_exists $$text;
				if(##return){
					openfile $$text;
					if(getresultex(25)==false){
                        //openfileに成功
						##new_hidemaru_handle = hidemaruhandle(0);
                	}
				}else{
					$$message="ファイルを見付けることが出来ませんでした。\nもしかしたら既に削除されているのかもしれません。\n\n（ファイル名）\n" + $$text;
					execmacro $$macro_path, "error", $$message;
				}
			}

			##i = ##i + 1;
		}
		setactivehidemaru(##current_hidemaru_handle);
	}

	if(##new_hidemaru_handle!=-1){
		##ret = dllfuncw(#g_dll_ohtorii_tools,"AppendCallBack_ProcessFinish",currentmacrofilename,"callback_open",str(##new_hidemaru_handle));
		return str(##ret);
	}
	return "1";


check_file_exists:
	$$filename=$$1;
	if(existfile($$filename)){
		if((existfile($$filename,1)&0x00000010) == 0){
			//パスが存在している、かつ、ファイルである
			return true;
		}
	}
	return false;


callback_open:
	##handle=val($$1);
	setactivehidemaru ##handle;
	return str(##return);


//
//start
//
start:
	$$root_macro_directory =dllfuncstrw(#g_dll_ohtorii_tools,"StaticStatusGetRootMacroDirectory");
	execmacro $$root_macro_directory+"\\internal\\util_foreach.mac", str(#g_dll_ohtorii_tools), str(#g_dll_hm_process), currentmacrofilename, "start_proc", "GetSelectionActionFileName";
	return getresultex(-1);

start_proc:
	if(0){
		$$command = sprintf(R"(/c start "" "%s")", $$1);
		##handle =dllfuncw(#g_dll_hm_process,"SpawnWithRedirect","cmd.exe","",true,true);
		##success=dllfuncw(#g_dll_hm_process,"SetArguments",##handle,$$command);
		##success=dllfuncw(#g_dll_hm_process,"SetCreateNoWindow",##handle,true);
		##success=dllfuncw(#g_dll_hm_process,"Start",##handle);
		##exit   =dllfuncw(#g_dll_hm_process,"WaitForExitWithTimeOut",##handle,1000);
	}else{
		$$command = sprintf(R"(cmd.exe /c start "" "%s")", $$1);
		runex $$command
			, 0 			//sync	  0:async 1:sync
			, 0, "" 		//stdin   0:none 1:auto 2:file 3:(reserve) 4:all 5:select
			, 0, "" 		//stdout  0:none 1:auto 2:file 3:add file  4:new 5:insert 6:replace
			, 0, "" 		//stderr  0:none 1:=out 2:file 3:add file  4:new 5:insert 6:replace
			, 0, "" 		//folder  0:none 1:current 2:specify 3:(reserve) 4:exe's folder
			, 2 			//show	  0:auto 1:show 2:hide
			, 1 			//nodraw  0:draw 1:no draw
			, 0 			//unicode 0:ansi 2:unicode
			;
	}
	return "1";


//
//insert_directory
//
insert_directory:
	$$root_macro_directory =dllfuncstrw(#g_dll_ohtorii_tools,"StaticStatusGetRootMacroDirectory");
	execmacro $$root_macro_directory+"\\internal\\util_foreach_join.mac", str(#g_dll_ohtorii_tools), currentmacrofilename, "insert_directory_proc";
	return getresultex(-1);


overwrite_directory:
	$$root_macro_directory =dllfuncstrw(#g_dll_ohtorii_tools,"StaticStatusGetRootMacroDirectory");
	execmacro $$root_macro_directory+"\\internal\\util_foreach_join.mac", str(#g_dll_ohtorii_tools), currentmacrofilename, "overwrite_directory_proc";
	return getresultex(-1);


//
//insert_file
//
insert_file:
	$$root_macro_directory=dllfuncstrw(#g_dll_ohtorii_tools,"StaticStatusGetRootMacroDirectory");
	if(dllfuncw(#g_dll_ohtorii_tools,"GetSelectionCount") == 1){
		#first_item=0;
		if(dllfuncstrw(#g_dll_ohtorii_tools, "GetSelectionSourceName", #first_item) == "directory"){
			//ディレクトリを一つ選択した場合はディレクトリ移動する
			//ディレクトリ移動の処理は、internal\\action.mac　に任せる。
			$$args[0]	=str(#g_dll_ohtorii_tools);
			$$args[1]	=str(#g_dll_hm_process) ;
			$$args[30]	="";
			execmacro $$root_macro_directory+"\\internal\\action.mac", $$args, 31;
			return getresultex(-1);
		}
	}
	execmacro 	$$root_macro_directory+"\\internal\\util_foreach.mac",
				str(#g_dll_ohtorii_tools),
				str(#g_dll_hm_process),
				currentmacrofilename,
				"insert_file_proc",
				"GetSelectionActionFileName";
	return getresultex(-1);

//
//preview
//
preview:
	##first_item_index	= 0;
	$$filename=dllfuncstrw(#g_dll_ohtorii_tools,"GetSelectionActionFileName",##first_item_index);
	##ret=dllfuncw(#g_dll_ohtorii_tools, "AutoPreviewRegist", $$filename);
	return "1";




////////////////////////////////////////////////////////////////////////////
//	Proc.
////////////////////////////////////////////////////////////////////////////
overwrite_directory_proc:
	$$root_macro_directory =dllfuncstrw(#g_dll_ohtorii_tools,"StaticStatusGetRootMacroDirectory");
	if((strstr($$2,"\\")!=-1) || (strstr($$2,"/")!=-1)){
		//ディレクトリ区切りあり
		execmacro $$root_macro_directory+"\\internal\\util_get_parent_folder_name.mac",$$2;
		$$parent_folder=getresultex(-1);
		insert($$parent_folder);
	}else{
		//ディレクトリ区切りなし
		overwrite($$2);
	}
	return ;


insert_directory_proc:
	$$root_macro_directory =dllfuncstrw(#g_dll_ohtorii_tools,"StaticStatusGetRootMacroDirectory");
	if((strstr($$2,"\\")!=-1) || (strstr($$2,"/")!=-1)){
		//ディレクトリ区切りあり
		execmacro $$root_macro_directory+"\\internal\\util_get_parent_folder_name.mac",$$2;
		$$parent_folder=getresultex(-1);
		insert($$parent_folder);
	}else{
		//ディレクトリ区切りなし
		insert($$2);
	}
	return ;


insert_file_proc:
	if((existfile($$1,1)&0x00000010) == 0x00000010){
		//ディレクトリの場合
		return ;
	}
	if(! existfile($$1)){
		//存在しない
		return ;
	}
	insertfile $$1, noaddhist;
	return ;

